'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _react = require('react');

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _PointerLockControls2 = require('../threex/controls/PointerLockControls');

var _PointerLockControls3 = _interopRequireDefault(_PointerLockControls2);

var _Object3D2 = require('./Object3D');

var _Object3D3 = _interopRequireDefault(_Object3D2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PointerLockControls = function (_Object3D) {
  _inherits(PointerLockControls, _Object3D);

  function PointerLockControls() {
    var _ref;

    _classCallCheck(this, PointerLockControls);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = PointerLockControls.__proto__ || Object.getPrototypeOf(PointerLockControls)).call.apply(_ref, [this].concat(args)));

    _this.animate = _this.animate.bind(_this);
    _this.domClicked = _this.domClicked.bind(_this);
    _this.requestFullscreen = _this.requestFullscreen.bind(_this);
    _this.pointerChanged = _this.pointerChanged.bind(_this);
    _this.fullscreenChanged = _this.fullscreenChanged.bind(_this);

    _this.frame = null;
    _this.locked = false;
    return _this;
  }

  // override


  _createClass(PointerLockControls, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _get2;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      (_get2 = _get(PointerLockControls.prototype.__proto__ || Object.getPrototypeOf(PointerLockControls.prototype), 'componentDidMount', this)).call.apply(_get2, [this].concat(args));
      this.controls = new _PointerLockControls3.default(this.obj);
      this.timer = new THREE.Clock();
      this.animate();

      document.addEventListener('pointerlockchange', this.pointerChanged, false);
      document.addEventListener('webkitpointerlockchange', this.pointerChanged, false);
      document.addEventListener('mozpointerlockchange', this.pointerChanged, false);
      document.addEventListener('fullscreenchange', this.fullscreenChanged, false);
      document.addEventListener('webkitfullscreenchange', this.fullscreenChanged, false);
      document.addEventListener('mozfullscreenchange', this.fullscreenChanged, false);
      this.context.domElement.addEventListener('click', this.domClicked);
    }

    // override

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _get3;

      cancelAnimationFrame(this.frame);
      this.controls.dispose();
      // this.controls = null

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      (_get3 = _get(PointerLockControls.prototype.__proto__ || Object.getPrototypeOf(PointerLockControls.prototype), 'componentWillUnmount', this)).call.apply(_get3, [this].concat(args));

      document.removeEventListener('pointerlockchange', this.pointerChanged, false);
      document.removeEventListener('webkitpointerlockchange', this.pointerChanged, false);
      document.removeEventListener('mozpointerlockchange', this.pointerChanged, false);
      document.removeEventListener('fullscreenchange', this.fullscreenChanged, false);
      document.removeEventListener('webkitfullscreenchange', this.fullscreenChanged, false);
      document.removeEventListener('mozfullscreenchange', this.fullscreenChanged, false);
      this.context.domElement.removeEventListener('click', this.domClicked);

      // https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API
      document.exitPointerLock = document.exitPointerLock || document.webkitExitPointerLock || document.mozExitPointerLock;
      document.exitPointerLock();
      // https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API
      document.exitFullscreen = document.exitFullscreen || document.webkitExitFullscreen || document.mozExitFullscreen;
      document.exitFullscreen();
    }
  }, {
    key: 'animate',
    value: function animate() {
      this.frame = requestAnimationFrame(this.animate);
      this.controls.update(this.timer.getDelta());
    }
  }, {
    key: 'domClicked',
    value: function domClicked() {
      this.requestFullscreen();
    }
  }, {
    key: 'requestFullscreen',
    value: function requestFullscreen() {
      var elem = this.context.domElement;
      elem.requestFullscreen = elem.requestFullscreen || elem.requestFullScreen || elem.webkitRequestFullscreen || elem.webkitRequestFullScreen || elem.mozRequestFullscreen || elem.mozRequestFullScreen; // Older API upper case 'S'.
      elem.requestFullscreen();
    }
  }, {
    key: 'fullscreenChanged',
    value: function fullscreenChanged() {
      var elem = document.fullscreenElement || document.fullScreenElement || document.webkitFullscreenElement || document.webkitFullScreenElement || document.mozFullscreenElement || document.mozFullScreenElement;
      if (elem === this.context.domElement) {
        elem.requestPointerLock = elem.requestPointerLock || elem.webkitRequestPointerLock || elem.mozRequestPointerLock;
        elem.requestPointerLock();
      }
    }
  }, {
    key: 'pointerChanged',
    value: function pointerChanged() {
      this.locked = (document.pointerLockElement || document.webkitPointerLockElement || document.mozPointerLockElement) === this.context.domElement;
      this.controls.enabled = this.locked;

      var onPointerChange = this.props.onPointerChange;

      if (onPointerChange) onPointerChange(this.locked);
    }
  }]);

  return PointerLockControls;
}(_Object3D3.default);

PointerLockControls.contextTypes = _extends({}, _Object3D3.default.contextTypes, {
  domElement: _react.PropTypes.object.isRequired
});
PointerLockControls.propTypes = {
  onPointerChange: _react.PropTypes.func // optional
};
exports.default = PointerLockControls;