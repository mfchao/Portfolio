/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.7 public/models/boston.gltf
*/

import React, { useContext, useRef, useState } from 'react'
import { Decal, MeshDistortMaterial, MeshWobbleMaterial, useGLTF, useTexture } from '@react-three/drei'
import { TextElementContext } from '../assets/TextElementContext';
import { useFrame } from '@react-three/fiber';
import { easing } from 'maath';


export function Boston(props) {
  const { hovered, projectHovered } = useContext(TextElementContext);
  const { nodes, materials } = useGLTF('models/boston.gltf');

  const textureAlways = useTexture("/images/Always/PalHero.jpg");
  const textureMindMap = useTexture("/images/MappingMinds/image1.jpg");
  const textureAscer = useTexture("/images/Ascer/tiles.jpg");

  const materialRef = useRef();
  const [opacity, setOpacity] = useState(0);

  // useFrame((delta) => {
  //   const targetOpacity = texture ? 1 : 0;
  //   const newOpacity = easing.damp(materialRef.current.opacity, targetOpacity, 0.1, delta);
  //   setOpacity(newOpacity);
  //   if (materialRef.current) {
  //     materialRef.current.opacity = newOpacity;
  //   }
  // });

  let texture = null;
  let rotation = [null];
  let scale = [null];
  if (projectHovered === "always") {
    texture = textureAlways;
    rotation = [0, 2.5, 0];
    scale = [2.5, 1.5, 2.8];
  } else if (projectHovered === "mappingminds") {
    texture = textureMindMap;
    rotation = [0, 0, 0];
    scale = [2.5, 1.5, 2];
  } else if (projectHovered === "ascer") {
    texture = textureAscer;
    rotation = [0, -2, 0];
    scale = [2, 1.5, 2.5];
  }

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Cube007.geometry} position={[1.281, 1.378, -0.061]} rotation={[0, -Math.PI / 4, 0]} scale={1.206} castShadow receiveShadow >
        {texture && (
          <>
            <meshBasicMaterial transparent opacity={0} />
            <Decal
              position={[0, -0.2, 0.2]}
              rotation={rotation}
              scale={scale}

            >
              {/* <MeshWobbleMaterial factor={1} speed={2} map={texture} polygonOffset polygonOffsetFactor={-1} /> */}
              <MeshDistortMaterial distort={0.3} speed={2} map={texture} polygonOffset polygonOffsetFactor={-1} ref={materialRef} />
            </Decal>

          </>
        )}
        {!texture && <meshBasicMaterial attach="material" {...materials['Material.002']} />}
      </mesh>
    </group>
  )
}

useGLTF.preload('models/boston.gltf')